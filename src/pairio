#!/usr/bin/env node

const sign_pair = require(__dirname+'/sign_pair.js').sign_pair;
const axios=require('axios');
let pairio_url=process.env.PAIRIO_URL||'http://localhost:25340';

function print_usage() {
  console.info('Usage:');
  console.info('pairio set [key] [value]');
  console.info('pairio get [key]');
}

let CLP = new CLParams(process.argv);

let command = CLP.unnamedParameters[0] || '';
let arg1 = CLP.unnamedParameters[1] || '';
let arg2 = CLP.unnamedParameters[2] || '';

if (!command) {
	print_usage();
	process.exit(-1);
}

let handlers={
	'get':handle_get,
	'set':handle_set
};

if (!(command in handlers)) {
	console.error('Unrecognized command: '+command);
	process.exit(-1);
}

handlers[command]();

function handle_get() {
	let timer=new Date();
	let key=arg1;
	if (!key) {
		print_usage();
		process.exit(-1);
	}
	let url=pairio_url+`/get/${key}`;
	http_get_json(url,function(err,obj) {
		if (err) {
			console.error(err.message);
			process.exit(-1);
		}
		if (!obj.success) {
			console.error(obj.error);
			process.exit(-1);
		}
		if (!obj.documents) {
			console.error('Unexpected response: '+JSON.stringify(obj,null,4));
			process.exit(-1);	
		}
		for (let i in obj.documents) {
			let doc=obj.documents[i];
			console.info(`${doc.user}: ${doc.value}`);
		}
	});
}

function handle_set() {
	let key=arg1;
	let value=arg2;
	if ((!key)||(!value)) {
		print_usage();
		process.exit(-1);
	}
	let user=process.env.PAIRIO_USER;
	let token=process.env.PAIRIO_TOKEN;
	if ((!user)||(!token)) {
		console.error('You must set the following environment variables: PAIRIO_USER, PAIRIO_TOKEN');
		process.exit(-1);
	}
	let signature=sign_pair(key,value,token);
	let url=pairio_url+`/set/${key}/${value}?user=${user}&signature=${signature}`;
	http_get_json(url,function(err,obj) {
		if (err) {
			console.error(err.message);
			process.exit(-1);
		}
		if (!obj.success) {
			console.error(obj.error);
			process.exit(-1);
		}
		console.info(`Key/value has been set for user: ${user}`);
	});
}

function http_get_json(url, callback) {
  axios.get(url, {
      responseType: 'json'
    })
    .then(function(response) {
      setTimeout(function() { // so we don't catch an error from the timeout
        callback(null, response.data);
      }, 0);
    })
    .catch(function(error) {
      callback(error);
    });
}

function CLParams(argv) {
  this.unnamedParameters = [];
  this.namedParameters = {};

  var args = argv.slice(2);
  for (var i = 0; i < args.length; i++) {
    var arg0 = args[i];
    if (arg0.indexOf('--') === 0) {
      arg0 = arg0.slice(2);
      var ind = arg0.indexOf('=');
      if (ind >= 0) {
        this.namedParameters[arg0.slice(0, ind)] = arg0.slice(ind + 1);
      } else {
        this.namedParameters[arg0] = '';
        if (i + 1 < args.length) {
          var str = args[i + 1];
          if (str.indexOf('-') != 0) {
            this.namedParameters[arg0] = str;
            i++;
          }
        }
      }
    } else if (arg0.indexOf('-') === 0) {
      arg0 = arg0.slice(1);
      this.namedParameters[arg0] = '';
    } else {
      this.unnamedParameters.push(arg0);
    }
  }
};
